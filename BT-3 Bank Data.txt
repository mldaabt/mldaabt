//BT-3 (Bank Account)
Write a smart contract on a test network, for Bank account of a customer for following
operations:
 Deposit money
 Withdraw Money
 Show balance

//////////////////////////////////////////////

pragma solidity >= 0.7.0;
// Write  a  smart  contract  on  a  test  network,  for  Bank  account  of  a  customer  for
  // following operations: Deposit money | Withdraw Money | Show balance
contract Bank{
    mapping(address => uint) public user_account;
    mapping(address => bool) public user_exist;

    function create_account() public payable returns(string memory){
        require(user_exist[msg.sender] == false, "Account Already created!");
        user_account[msg.sender] = msg.value;
        user_exist[msg.sender] = true;
        return "Account created";
    }

    function deposit(uint amount) public payable returns(string memory){
        require(user_exist[msg.sender] == true, "Account not created!");
        require(amount > 0, "Amount should be greater than 0");
        user_account[msg.sender] += amount;
        return "Amount deposisted sucessfully";
    }

    function withdraw(uint amount) public payable returns(string memory){
        require(user_exist[msg.sender] == true, "Account not created!");
        require(amount > 0, "Amount should be greater than 0");
        require(user_account[msg.sender] >= amount, "Amount is greater than money deposisted");
        user_account[msg.sender] -= amount;
        return "Amount withdrawn sucessfully";    
    }

    function account_balance() public view returns(uint){
        return user_account[msg.sender];
    }
    
    function account_exists() public view returns(bool){
        return user_exist[msg.sender];
    }

}


/////////////////////////////////////////
What is Remix IDE?
It is an online IDE for creating solid, smart contracts, so you do not need to install or
download anything to do any setup. You can develop, deploy, and administer your solidity
smart contract using Remix IDE. Remix IDE, is a no-setup tool with a GUI for developing smart contracts. 

WHAT IS A SMART CONTRACT?
A "smart contract" is simply a program that runs on the Ethereum blockchain. It's a collection of code (its functions) and data (its state) that resides at a specific address on the Ethereum blockchain.

Smart contracts are a type of Ethereum account. This means they have a balance and can be the target of transactions. However they're not controlled by a user, instead they are deployed to the network and run as programmed. User accounts can then interact with a smart contract by submitting transactions that execute a function defined on the smart contract. Smart contracts can define rules, like a regular contract, and automatically enforce them via the code. Smart contracts cannot be deleted by default, and interactions with them are irreversible
Smart contracts are run by each node as part of the block creation process. Just like Bitcoin, block creation is the moment where transactions actually take place, in the sense that once a transaction takes place inside a block, global blockchain state is changed.

real-world examples of smart contracts
1. Improve a digital advertising campaign
Smart contracts can potentially help advertisers and publishers build strong relationships. A smart contract can include conditions that a publisher achieves predetermined targets.

2. Build the best customer experience
Smart contracts can cultivate a stronger B2C relationship in real time.

3. Fill the void in entertainment consumption
Blockchain could improve how consumers interact with their preferred entertainment choices. 

4. Eliminate the go-between in financial transactions
Blockchain technology has brought attention to decentralized finance. It is most associated with peer-to-peer (P2P) cryptocurrency transactions like bitcoin and ethereum. 

drawbacks of smart contracts

1. Compliance
There are minimal government and international regulations for smart contracts and the underlying blockchain technology.

2. Data integrity
Automating data processing via smart contracts could benefit a company dependent on multiple transactions. 

3. Logic hacks
One of blockchain technology's strengths is its use of computational logic to move data between nodes.

4. Scalability
It's challenging for public blockchain technology to scale well. The blockchain must be able to sustain many transactions simultaneously. 

Benefits :
-Speed,efficiency,accuracy
-trust and transparency
-security and saving

conclusion
	a smart contract for a bank account of a customer has been written and tested.

